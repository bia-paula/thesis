
    img_seqs = Input(shape=(time_steps, image_height, image_width, channels), dtype="float64")
    img_seqs_in = img_seqs
    '''if panoptic_sf_max:
        img_seqs_in = MaxPool3D(pool_size=(1, 2, 2))(img_seqs)'''
    if label_encoding_heatmap == 2:
        task = Input(shape=(image_height, image_width, channels))
        combinedInput = Multiply()([img_seqs_in, task])
    else:
        task = Input(shape=(time_steps, image_height, image_width, task_vector_size))
        # ftask = Dense(1000, activation = 'relu')(task)
        '''offsets = Dense(channels, activation='tanh')(task)
        offsets = Dropout(.5)(offsets)'''
        # offsets = Reshape(target_shape = (channels,1,1))(offsets)
        '''combinedInput = Multiply()([img_seqs_in, offsets])'''
        combinedInput = Concatenate(axis=-1)([img_seqs_in, task])

    embedding = Dense(units=64, activation='relu')(combinedInput)

    conv1 = Conv3D(filters=32, kernel_size=(2, 3, 3), padding='same', activation='relu')(embedding)
    conv1 = BatchNormalization()(conv1)
    #conv2 = Conv3D(filters=20, kernel_size=(2, 6, 6), padding='same', activation='relu')(conv1)

    up_conv = UpSampling3D(size=(1, 2, 2))(conv1)

    conv2 = Conv3D(filters=16, kernel_size=(2, 3, 3), padding='same', activation='relu')(up_conv)
    conv2 = BatchNormalization()(conv2)

    '''conv1 = MaxPool3D(pool_size=(1, 2, 2))(conv1)'''

    '''y1 = ConvLSTM2D(filters=20, kernel_size=(2,2), padding='same', return_sequences=True, activation='relu')(embedding)
    # y = Dropout(.2)(y) #new
    y1 = BatchNormalization()(y1)'''
    #y1 = ConvLSTM2D(filters=16, kernel_size=(2, 2), padding='same', return_sequences=True, activation='relu')(conv1)
    #y1 = BatchNormalization()(y1)


    y2 = ConvLSTM2D(filters=10, kernel_size=(2, 2), strides=(2,2), return_sequences=True, activation='relu')(conv2)
    # y = Dropout(.2)(y) #new
    y2 = BatchNormalization()(y2)

    #y3 = ConvLSTM2D(filters=4, kernel_size=2, padding='same', return_sequences=True, activation='relu')(y1)
    #y3 = BatchNormalization()(y3)


    #y3 = Conv3D(filters=10, kernel_size=(2, 2, 2), padding='same', activation='relu')(y2)
    #y3 = MaxPool3D(pool_size=(1, 2, 2))(y3)

    #out = Dense(units=160, activation="softmax")(y)
    #out = TimeDistributed(Flatten())(out)


    #out = Dense(1, activation='softmax', name='output')(y2)
    y3 = Conv3D(filters=1, kernel_size=(3, 3, 3), padding='same', activation='sigmoid')(y2)
    out = TimeDistributed(Flatten())(y3)


    model_rnn = Model([img_seqs, task], out)

    #categorical_crossentropy, metrics=['categorical_accuracy']

    #metrics = ['categorical_accuracy']
    metrics = [Precision(), Recall()]



    model_rnn.compile(loss='categorical_crossentropy', optimizer=Adam(learning_rate=1e-3),
                      metrics=metrics)  # rmsprop

    model_rnn.summary()
    return model_rnn